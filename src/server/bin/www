#!/usr/bin/env node
const logger = require('../logging').create('server')
const http = require('http')
const port = normalizePort(process.env.PORT || '3000')
const db = require('../database')
const appFactory = require('../app')
const DashboardSocketManager = require('../sockets/DashboardSocketManager')

process.on('unhandledRejection', error => {
  logger.error('Unhandled Promise Rejection -> ', error)
})

process.on('uncaughtException', error => {
  logger.error('Unhandled Error -> ', error)
})

logger.info('Screenie Starting')
db.connect()
  .then(startApplication, failFast)
  .catch(failFast)

async function startApplication() {
  logger.info('Starting server...')

  let dashboardSocketManager
  const app = appFactory.create([(req, res, next) => {
    req.dashboardSocketManager = dashboardSocketManager
    next()
  }])

  const server = http.createServer(app)
  const dashboardIds = await getDashboardIds()
  dashboardSocketManager = new DashboardSocketManager({ server, logger, dashboardIds })

  app.set('port', port)
  server.on('error', (error) => {
    if (error.syscall !== 'listen') {
      throw error
    }

    const bind = typeof port === 'string' ?
      `Pipe ${port}` :
      `Port ${port}`

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
    }
  })
  server.on('listening', () => {
    const address = server.address()
    const bind = typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`
    logger.info(`Listening on ${bind}`)
  })
  server.listen(port)
}

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

async function getDashboardIds() {
  const dashboard = db.getModel('Dashboard')
  const projected = await dashboard.find({}, 'id')
  const dashboardIds = projected.map(x => x.id)
  return dashboardIds
}

function failFast(err) {
  logger.error('Error occurred while starting up ->', err)
  process.exit(1)
}